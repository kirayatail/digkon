<html><head><link type='text/css' href='style.css' rel='stylesheet'></head><body class='pgBgnd'>
<h3 align='center'>Equations</h3>
<table width='90%' align='center' border='1' cellpadding='0' cellspacing='0'>
<tr><td>
</td></tr><tr><td>
********** Mapped Logic **********
</td></tr><tr><td>
</td></tr><tr><td>
count(0)1 <= ((en_cmp_eq0000 AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count_addsub0000(6) AND count(2) AND count(3) AND count(4) AND count(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(7) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count_addsub0000(6) AND count(2) AND count(3) AND count(4) AND count(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(7) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count_addsub0000(6) AND NOT count(2) AND count(3) AND count(4) AND count(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(7) AND count(8)));
</td></tr><tr><td>
</td></tr><tr><td>
count(0) <= ((NOT count(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (count(0)1 AND NOT en_cmp_eq0000 AND count_addsub0000(9)));
</td></tr><tr><td>
</td></tr><tr><td>
count(2) <= ((NOT en_cmp_eq0000 AND NOT count(0) AND count(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count_addsub0000(1) AND count(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT count(2)));
</td></tr><tr><td>
</td></tr><tr><td>
count(3) <= ((NOT en_cmp_eq0000 AND NOT count(2) AND count(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND NOT count(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(0) AND count(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count_addsub0000(1) AND count(3)));
</td></tr><tr><td>
</td></tr><tr><td>
count(4) <= ((NOT en_cmp_eq0000 AND NOT count(2) AND count(4))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(3) AND count(4))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND count(3) AND NOT count(4))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(0) AND count(4))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count_addsub0000(1) AND count(4)));
</td></tr><tr><td>
</td></tr><tr><td>
count(5) <= ((NOT en_cmp_eq0000 AND NOT count(3) AND count(5))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(4) AND count(5))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND count(3) AND count(4) AND NOT count(5))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(0) AND count(5))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count_addsub0000(1) AND count(5))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(2) AND count(5)));
</td></tr><tr><td>
</td></tr><tr><td>
count(6) <= (NOT en_cmp_eq0000 AND count_addsub0000(6));
</td></tr><tr><td>
</td></tr><tr><td>
count(7) <= ((NOT en_cmp_eq0000 AND NOT count(5) AND count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(6) AND count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND count(3) AND count(4) AND count(5) AND count(6) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(0) AND count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count_addsub0000(1) AND count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(2) AND count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(3) AND count(7))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(4) AND count(7)));
</td></tr><tr><td>
</td></tr><tr><td>
count(8) <= ((NOT en_cmp_eq0000 AND NOT count(4) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(5) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(6) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(7) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND count(3) AND count(4) AND count(5) AND count(6) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(7) AND NOT count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(0) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count_addsub0000(1) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(2) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT en_cmp_eq0000 AND NOT count(3) AND count(8)));
</td></tr><tr><td>
</td></tr><tr><td>
count_addsub0000(1) <= count(0)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	 XOR 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count_addsub0000(1) <= (NOT en_cmp_eq0000 AND count_addsub0000(1));
</td></tr><tr><td>
</td></tr><tr><td>
count_addsub0000(6) <= count(6)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	 XOR 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count_addsub0000(6) <= (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND count(3) AND count(4) AND count(5));
</td></tr><tr><td>
</td></tr><tr><td>
count_addsub0000(9) <= (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(2) AND count(3) AND count(4) AND count(5) AND count(6) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(7) AND count(8))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	 XOR 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count_addsub0000(9) <= (NOT en_cmp_eq0000 AND count_addsub0000(9));
</td></tr><tr><td>
</td></tr><tr><td>
en <= ((en_cmp_eq0000)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (reset AND en));
</td></tr><tr><td>
</td></tr><tr><td>
en_cmp_eq0000 <= (NOT en_cmp_eq0000 AND count(0) AND count_addsub0000(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count_addsub0000(6) AND count_addsub0000(9) AND NOT count(2) AND count(3) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	count(4) AND count(5) AND count(7) AND count(8));
</td></tr><tr><td>
</td></tr><tr><td>
enable_lamp <= ((puls)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND enable_lamp)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(1) AND enable_lamp)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(3) AND enable_lamp)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(2) AND enable_lamp));
</td></tr><tr><td>
FDCPE_levin: FDCPE port map (levin,x1/q,clk,'0','0');
</td></tr><tr><td>
FDCPE_nstate0: FDCPE port map (nstate(0),'0','0',nstate(0)/nstate(0)_RSTF,NOT nstate(0)/nstate(0)_SETF__$INT);
</td></tr><tr><td>
</td></tr><tr><td>
nstate(0)/nstate(0)_RSTF <= ((state(0) AND NOT state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(1) AND state(3) AND NOT state(2)));
</td></tr><tr><td>
</td></tr><tr><td>
nstate(0)/nstate(0)_SETF__$INT <= ((state(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(1) AND NOT state(2) AND puls));
</td></tr><tr><td>
</td></tr><tr><td>
nstate(1)/nstate(1)_SETF <= ((state(0) AND NOT state(1) AND NOT state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND state(1) AND NOT state(3)));
</td></tr><tr><td>
FDCPE_nstate1: FDCPE port map (nstate(1),'0','0',nstate(1)/nstate(1)_RSTF,nstate(1)/nstate(1)_SETF);
</td></tr><tr><td>
</td></tr><tr><td>
nstate(1)/nstate(1)_RSTF <= ((NOT state(0) AND NOT state(1) AND NOT state(3) AND NOT puls)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND state(1) AND NOT state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(1) AND state(3) AND NOT state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(1) AND NOT state(3) AND state(2)));
</td></tr><tr><td>
</td></tr><tr><td>
nstate(2)/nstate(2)_SETF <= ((NOT state(0) AND NOT state(3) AND state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(1) AND NOT state(3) AND state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND state(1) AND NOT state(3) AND NOT state(2)));
</td></tr><tr><td>
FDCPE_nstate2: FDCPE port map (nstate(2),'0','0',nstate(2)/nstate(2)_RSTF,nstate(2)/nstate(2)_SETF);
</td></tr><tr><td>
</td></tr><tr><td>
nstate(2)/nstate(2)_RSTF <= ((state(0) AND state(1) AND NOT state(3) AND state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND state(1) AND NOT state(3) AND NOT state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(1) AND state(3) AND NOT state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND NOT state(1) AND NOT state(3) AND NOT state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(1) AND NOT state(3) AND NOT state(2) AND NOT puls));
</td></tr><tr><td>
</td></tr><tr><td>
nstate(3)/nstate(3)_RSTF__$INT <= ((state(0) AND state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND state(1) AND state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(1) AND NOT state(3) AND NOT state(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	puls)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(1) AND state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(3) AND state(2)));
</td></tr><tr><td>
FDCPE_nstate3: FDCPE port map (nstate(3),'0','0',NOT nstate(3)/nstate(3)_RSTF__$INT,nstate_PRE(3));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nstate_PRE(3) <= (state(0) AND state(1) AND NOT state(3) AND state(2));
</td></tr><tr><td>
FDCPE_puls: FDCPE port map (puls,'0','0',puls/puls_RSTF,NOT puls/puls_SETF__$INT);
</td></tr><tr><td>
</td></tr><tr><td>
puls/puls_RSTF <= ((x2/state(1) AND x2/state(0) AND NOT x2/pulson_mux0001)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND x2/state(0) AND NOT levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND NOT x2/state(0) AND NOT x2/pulson_mux0001));
</td></tr><tr><td>
</td></tr><tr><td>
puls/puls_SETF__$INT <= ((reset AND NOT x2/state(1) AND x2/state(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (x2/state(1) AND x2/state(0) AND NOT x2/pulson_mux0001)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND x2/state(0) AND NOT levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND NOT x2/state(0) AND NOT x2/pulson_mux0001)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (reset AND x2/state(1) AND NOT x2/state(0) AND NOT levin));
</td></tr><tr><td>
FDCPE_state0: FDCPE port map (state(0),nstate(0),clk,NOT reset,'0',en);
</td></tr><tr><td>
FDCPE_state1: FDCPE port map (state(1),nstate(1),clk,NOT reset,'0',en);
</td></tr><tr><td>
FDCPE_state2: FDCPE port map (state(2),nstate(2),clk,NOT reset,'0',en);
</td></tr><tr><td>
FDCPE_state3: FDCPE port map (state(3),nstate(3),clk,NOT reset,'0',en);
</td></tr><tr><td>
FDCPE_transmitter: FDCPE port map (transmitter,'0','0',transmitter_OBUF/transmitter_OBUF_RSTF,transmitter_OBUF/transmitter_OBUF_SETF);
</td></tr><tr><td>
</td></tr><tr><td>
transmitter_OBUF/transmitter_OBUF_RSTF <= ((NOT state(0) AND state(1) AND NOT state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(3) AND state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT state(0) AND NOT state(1) AND state(3) AND NOT state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(1) AND NOT state(3) AND state(2) AND NOT in_signal));
</td></tr><tr><td>
</td></tr><tr><td>
transmitter_OBUF/transmitter_OBUF_SETF <= ((state(0) AND NOT state(1) AND NOT state(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND NOT state(3) AND NOT state(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (state(0) AND NOT state(3) AND in_signal));
</td></tr><tr><td>
FDCPE_x1/q: FDCPE port map (x1/q,enable,clk,'0','0');
</td></tr><tr><td>
</td></tr><tr><td>
x2/nstate(0)/x2/nstate(0)_SETF <= ((x2/state(1) AND NOT x2/state(0) AND levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND NOT x2/state(0) AND NOT levin));
</td></tr><tr><td>
FDCPE_x2/nstate0: FDCPE port map (x2/nstate(0),'0','0',NOT x2/nstate(0)/x2/nstate(0)_RSTF__$INT,x2/nstate(0)/x2/nstate(0)_SETF);
</td></tr><tr><td>
</td></tr><tr><td>
x2/nstate(0)/x2/nstate(0)_RSTF__$INT <= ((reset AND x2/state(1) AND NOT x2/state(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (x2/state(1) AND NOT x2/state(0) AND levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND NOT x2/state(0) AND NOT levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (reset AND NOT x2/state(1) AND x2/state(0) AND levin));
</td></tr><tr><td>
</td></tr><tr><td>
x2/nstate(1)/x2/nstate(1)_SETF <= ((x2/state(1) AND NOT x2/state(0) AND levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND x2/state(0) AND NOT levin));
</td></tr><tr><td>
</td></tr><tr><td>
x2/nstate(1)/x2/nstate(1)_RSTF__$INT <= ((reset AND x2/state(1) AND NOT x2/state(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (reset AND NOT x2/state(1) AND x2/state(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (x2/state(1) AND NOT x2/state(0) AND levin)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT x2/state(1) AND x2/state(0) AND NOT levin));
</td></tr><tr><td>
FDCPE_x2/nstate1: FDCPE port map (x2/nstate(1),'0','0',NOT x2/nstate(1)/x2/nstate(1)_RSTF__$INT,x2/nstate(1)/x2/nstate(1)_SETF);
</td></tr><tr><td>
FDCPE_x2/pulson_mux0001: FDCPE port map (x2/pulson_mux0001,'0','0','0',NOT reset);
</td></tr><tr><td>
FDCPE_x2/state0: FDCPE port map (x2/state(0),x2/nstate(0),clk,'0','0');
</td></tr><tr><td>
FDCPE_x2/state1: FDCPE port map (x2/state(1),x2/nstate(1),clk,'0','0');
</td></tr><tr><td>
Register Legend:
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FDCPE (Q,D,C,CLR,PRE,CE); 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FTCPE (Q,D,C,CLR,PRE,CE); 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LDCP  (Q,D,G,CLR,PRE); 
</td></tr><tr><td>
</td></tr>
</table>
<form><span class="pgRef"><table width="90%" align="center"><tr>
<td align="left"><input type="button" onclick="javascript:parent.leftnav.showTop()" onmouseover="window.status='goto top of page'; return true;" onmouseout="window.status=''" value="back to top"></td>
<td align="right"><input type="button" onclick="window.print()" onmouseover="window.status='print page'; return true;" onmouseout="window.status=''" value="print page"></td>
</tr></table></span></form>
</body></html>
