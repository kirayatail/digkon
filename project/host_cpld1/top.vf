////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : top.vf
// /___/   /\     Timestamp : 12/11/2012 14:36:06
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family xc9500xl -verilog Z:/DigKon/project/digkon/project/host_cpld1/top.vf -w Z:/DigKon/project/digkon/project/host_cpld1/top.sch
//Design Name: top
//Device: xc9500xl
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module FD4CE_MXILINX_top(C, 
                         CE, 
                         CLR, 
                         D0, 
                         D1, 
                         D2, 
                         D3, 
                         Q0, 
                         Q1, 
                         Q2, 
                         Q3);

    input C;
    input CE;
    input CLR;
    input D0;
    input D1;
    input D2;
    input D3;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   
   
   FDCE #( .INIT(1'b0) ) U0 (.C(C), 
            .CE(CE), 
            .CLR(CLR), 
            .D(D0), 
            .Q(Q0));
   FDCE #( .INIT(1'b0) ) U1 (.C(C), 
            .CE(CE), 
            .CLR(CLR), 
            .D(D1), 
            .Q(Q1));
   FDCE #( .INIT(1'b0) ) U2 (.C(C), 
            .CE(CE), 
            .CLR(CLR), 
            .D(D2), 
            .Q(Q2));
   FDCE #( .INIT(1'b0) ) U3 (.C(C), 
            .CE(CE), 
            .CLR(CLR), 
            .D(D3), 
            .Q(Q3));
endmodule
`timescale 1ns / 1ps

module FD_MXILINX_top(C, 
                      D, 
                      Q);

   parameter INIT = 1'b0;
   
    input C;
    input D;
   output Q;
   
   wire XLXN_4;
   
   GND  I_36_43 (.G(XLXN_4));
   FDCP  U0 (.C(C), 
            .CLR(XLXN_4), 
            .D(D), 
            .PRE(XLXN_4), 
            .Q(Q));
endmodule
`timescale 1ns / 1ps

module FDRE_MXILINX_top(C, 
                        CE, 
                        D, 
                        R, 
                        Q);

   parameter INIT = 1'b0;
   
    input C;
    input CE;
    input D;
    input R;
   output Q;
   
   wire A0;
   wire A1;
   wire QD;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   AND3B1  I_36_32 (.I0(R), 
                   .I1(D), 
                   .I2(CE), 
                   .O(A1));
   AND3B2  I_36_33 (.I0(CE), 
                   .I1(R), 
                   .I2(Q_DUMMY), 
                   .O(A0));
   OR2  I_36_34 (.I0(A1), 
                .I1(A0), 
                .O(QD));
   (* HU_SET = "I_36_42_0" *) (* RLOC = "R0C0" *) 
   FD_MXILINX_top  I_36_42 (.C(C), 
                           .D(QD), 
                           .Q(Q_DUMMY));
endmodule
`timescale 1ns / 1ps

module CJ4RE_MXILINX_top(C, 
                         CE, 
                         R, 
                         Q0, 
                         Q1, 
                         Q2, 
                         Q3);

    input C;
    input CE;
    input R;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   
   wire Q3B;
   wire Q0_DUMMY;
   wire Q1_DUMMY;
   wire Q2_DUMMY;
   wire Q3_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   assign Q1 = Q1_DUMMY;
   assign Q2 = Q2_DUMMY;
   assign Q3 = Q3_DUMMY;
   INV  I_36_30 (.I(Q3_DUMMY), 
                .O(Q3B));
   (* HU_SET = "U0_1" *) 
   FDRE_MXILINX_top #( .INIT(1'b0) ) U0 (.C(C), 
                        .CE(CE), 
                        .D(Q3B), 
                        .R(R), 
                        .Q(Q0_DUMMY));
   (* HU_SET = "U1_2" *) 
   FDRE_MXILINX_top #( .INIT(1'b0) ) U1 (.C(C), 
                        .CE(CE), 
                        .D(Q0_DUMMY), 
                        .R(R), 
                        .Q(Q1_DUMMY));
   (* HU_SET = "U2_4" *) 
   FDRE_MXILINX_top #( .INIT(1'b0) ) U2 (.C(C), 
                        .CE(CE), 
                        .D(Q1_DUMMY), 
                        .R(R), 
                        .Q(Q2_DUMMY));
   (* HU_SET = "U3_3" *) 
   FDRE_MXILINX_top #( .INIT(1'b0) ) U3 (.C(C), 
                        .CE(CE), 
                        .D(Q2_DUMMY), 
                        .R(R), 
                        .Q(Q3_DUMMY));
endmodule
`timescale 1ns / 1ps

module rand_MUSER_top(clk, 
                      getrand, 
                      rst, 
                      chall);

    input clk;
    input getrand;
    input rst;
   output [3:0] chall;
   
   wire XLXN_25;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_69;
   
   VCC  XLXI_6 (.P(XLXN_25));
   (* HU_SET = "XLXI_16_6" *) 
   FD4CE_MXILINX_top  XLXI_16 (.C(clk), 
                              .CE(getrand), 
                              .CLR(rst), 
                              .D0(XLXN_66), 
                              .D1(XLXN_67), 
                              .D2(XLXN_68), 
                              .D3(XLXN_69), 
                              .Q0(chall[0]), 
                              .Q1(chall[1]), 
                              .Q2(chall[2]), 
                              .Q3(chall[3]));
   (* HU_SET = "XLXI_18_5" *) 
   CJ4RE_MXILINX_top  XLXI_18 (.C(clk), 
                              .CE(XLXN_25), 
                              .R(rst), 
                              .Q0(XLXN_66), 
                              .Q1(XLXN_67), 
                              .Q2(XLXN_68), 
                              .Q3(XLXN_69));
endmodule
`timescale 1ns / 1ps

module top(clk, 
           getRand, 
           rst, 
           sendEnable, 
           data, 
           lowClk, 
           sendDone, 
           xmt);

    input clk;
    input getRand;
    input rst;
    input sendEnable;
   output [3:0] data;
   output lowClk;
   output sendDone;
   output xmt;
   
   wire XLXN_20;
   wire lowClk_DUMMY;
   wire [3:0] data_DUMMY;
   
   assign data[3:0] = data_DUMMY[3:0];
   assign lowClk = lowClk_DUMMY;
   counter  XLXI_1 (.clk(clk), 
                   .reset(XLXN_20), 
                   .done(lowClk_DUMMY));
   sender  XLXI_2 (.data(data_DUMMY[3:0]), 
                  .lowClk(lowClk_DUMMY), 
                  .sendEnable(sendEnable), 
                  .sendDone(sendDone), 
                  .transmitter(xmt));
   rand_MUSER_top  XLXI_3 (.clk(clk), 
                          .getrand(getRand), 
                          .rst(XLXN_20), 
                          .chall(data_DUMMY[3:0]));
   INV  XLXI_4 (.I(rst), 
               .O(XLXN_20));
endmodule
